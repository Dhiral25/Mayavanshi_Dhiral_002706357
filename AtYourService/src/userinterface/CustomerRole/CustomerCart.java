/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DhiralM
 */
public class CustomerCart extends javax.swing.JPanel {

    /**
     * Creates new form CustomerCart
     */
    private JPanel userProcessContainer;
    EcoSystem ecosystem;
    DefaultTableModel grocModel;
    private UserAccount userAccount;
    DefaultTableModel foodModel;
    DefaultTableModel legalModel;
    DefaultTableModel maidModel;
    DefaultTableModel therapyModel;
    Customer cust;
    JSplitPane screen;
    Double Total;
    Double Sum;
    
    public CustomerCart(JPanel userProcessContainer, UserAccount account, EcoSystem system, JSplitPane screen, Customer cust) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.screen = screen;
        this.userAccount = account;
        this.cust = cust;
        ecosystem = system;
        
        
        
        createTableModel();
        populateCustomerOrders();
    }
    public void populateCustomerOrders() {
        //Legal
        for (int i = legalModel.getRowCount() - 1; i >= 0; i--) {
            legalModel.removeRow(i);
        }
        for (int i = 0; i < cust.getLegalorderDirectoryList().size();i++) {
            legalModel.addRow(new Object[]{
                i+1,
                cust.getLegalorderDirectoryList().get(i).getStatus(),
                cust.getLegalorderDirectoryList().get(i).getLegal().getName()
            });
        }
        //grocery
        for (int i = grocModel.getRowCount() - 1; i >= 0; i--) {
            grocModel.removeRow(i);
        }
        for (int i = 0; i < cust.getOrderDirectoryList().size();i++) {
            grocModel.addRow(new Object[]{
                i+1,
                cust.getOrderDirectoryList().get(i).getStatus(),
                cust.getOrderDirectoryList().get(i).getRestaurant().getName()
            });
            
            
        }
        // restuarant
         for (int i = maidModel.getRowCount() - 1; i >= 0; i--) {
            maidModel.removeRow(i);
        }
        for (int i = 0; i < cust.getMaidDirectoryList().size();i++) {
            maidModel.addRow(new Object[]{
                i+1,
                cust.getMaidDirectoryList().get(i).getStatus(),
                cust.getMaidDirectoryList().get(i).getHospitalManager().getName()
            });
        }
        
          for (int i = therapyModel.getRowCount() - 1; i >= 0; i--) {
            therapyModel.removeRow(i);
        }
        for (int i = 0; i < cust.getTherapistorderDirectoryList().size();i++) {
            therapyModel.addRow(new Object[]{
                i+1,
                cust.getTherapistorderDirectoryList().get(i).getStatus(),
                cust.getTherapistorderDirectoryList().get(i).getHospitalManager().getName()
            });
        }
              
        // cleaning
        for (int i = foodModel.getRowCount() - 1; i >= 0; i--) {
            foodModel.removeRow(i);
        }
        for (int i = 0; i < cust.getOrderDirectoryList().size();i++) {
            foodModel.addRow(new Object[]{
                i+1,
                cust.getHotelorderDirectoryList().get(i).getStatus(),
                cust.getHotelorderDirectoryList().get(i).getRestaurant().getName()
            });



    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        restListTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        restListTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        legalTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        restListTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        restListTable4 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));

        restListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(restListTable);

        restListTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(restListTable1);

        legalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(legalTable);

        restListTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(restListTable3);

        restListTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(restListTable4);

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Grocery Order");

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Food Order");

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Legal Service Order");

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Cleaner Service Order");

        jLabel8.setBackground(new java.awt.Color(204, 255, 0));
        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Therapy Service Order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable legalTable;
    private javax.swing.JTable restListTable;
    private javax.swing.JTable restListTable1;
    private javax.swing.JTable restListTable3;
    private javax.swing.JTable restListTable4;
    // End of variables declaration//GEN-END:variables

    private void createTableModel() {
         grocModel = new DefaultTableModel();
         restListTable.setModel(grocModel);
         grocModel.addColumn("Id");
         grocModel.addColumn("Status");
         grocModel.addColumn("Grcoery Store Name");
         
         
         foodModel = new DefaultTableModel();
         restListTable1.setModel(foodModel);
         foodModel.addColumn("Id");
         foodModel.addColumn("Status");
         foodModel.addColumn("Restaurant Name");
         
         legalModel = new DefaultTableModel();
         legalTable.setModel(legalModel);
         legalModel.addColumn("Id");
         legalModel.addColumn("Status");
         legalModel.addColumn("Legal Company Name");
         
         maidModel = new DefaultTableModel();
         restListTable3.setModel(maidModel);
         maidModel.addColumn("Id");
         maidModel.addColumn("Status");
         maidModel.addColumn("HouseHelp Name");
         
         therapyModel = new DefaultTableModel();
         restListTable4.setModel(therapyModel);
         therapyModel.addColumn("Id");
         therapyModel.addColumn("Status");
         therapyModel.addColumn("Therapist Name");
    }

    private void populateTable() {
        if(cust.getOrderDirectoryList().size() > 0){
            for (int i = grocModel.getRowCount() - 1; i >= 0; i--) {
                grocModel.removeRow(i);
            }
            int index = (cust.getOrderDirectoryList().size()) - 1;
            for (int i = 0; i < cust.getOrderDirectoryList().get(index).getOrderList().size(); i++) {
                Total = 0.0;
                Total = Double.parseDouble(cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice()) * cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity();
                Sum+=Total;
                grocModel.addRow(new Object[]{
                    cust.getOrderDirectoryList().get(index).getId(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity(),
                    Total
                });
            }
        }
        if(cust.getHotelorderDirectoryList().size() > 0){
             for (int i = grocModel.getRowCount() - 1; i >= 0; i--) {
                grocModel.removeRow(i);
            }
            int index = (cust.getOrderDirectoryList().size()) - 1;
            for (int i = 0; i < cust.getOrderDirectoryList().get(index).getOrderList().size(); i++) {
                Total = 0.0;
                Total = Double.parseDouble(cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice()) * cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity();
                Sum+=Total;
                grocModel.addRow(new Object[]{
                    cust.getOrderDirectoryList().get(index).getId(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity(),
                    Total
                });
            }
        }
    }
}
